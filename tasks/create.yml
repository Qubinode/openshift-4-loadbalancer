---
- name: show lb_api
  debug:
    var: lb_api
  failed_when: lb_api is not defined

- name: show lb_api_listen
  debug:
    var: lb_api_listen
  failed_when: lb_api_listen is not defined

- name: show lb_ingress_http_listen
  debug:
    var: lb_ingress_http_listen
  failed_when: lb_ingress_http_listen is not defined

- name: show lb_ingress_http
  debug:
    var: lb_ingress_http
  failed_when: lb_ingress_http is not defined

- name: show lb_ingress_https
  debug:
    var: lb_ingress_https
  failed_when: lb_ingress_https is not defined

- name: show lb_ingress_https_listen
  debug:
    var:  lb_ingress_https_listen
  failed_when: lb_ingress_https_listen is not defined

- name: show lb_machine_config_server
  debug:
    var: lb_machine_config_server
  failed_when: lb_machine_config_server is not defined

- name: show lb_machine_config_server_listen
  debug:
    var: lb_machine_config_server_listen
  failed_when: lb_machine_config_server_listen is not defined

- name: Install OpenShift 4 Loadbalancer SystemD service
  template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/{{ lb_name }}.service"

- name: reload and reset systemd for {{ lb_name }}.service
  shell: >
    systemctl daemon-reload
    systemctl reset-failed
  ignore_errors: yes

- name: Enable and start {{ lb_name }}.service
  systemd:
    name: "{{ lb_name }}.service"
    enabled: yes
    daemon_reload: yes
    state: started

- name: Collect services facts
  service_facts:
  register: services_state

- name: check for issue https://github.com/containers/libpod/issues/2553
  block:
    - name: check logs for reported issue
      shell: >
        journalctl -n10 -u {{ lb_name }} |awk -F'by' '{print $2}'|awk -F'.' '{print $1}'|awk '{print $1}'|grep -v -e '^$'
      register: found_issue
      ignore_errors: yes

    - name: remove existing {{ lb_name }} container storage
      shell: podman rm --force --storage "{{ found_issue.stdout }}"
      register: remove_issue
      ignore_errors: yes

    - name: restart {{ lb_name }}.service
      systemd:
        name: "{{ lb_name }}.service"
        enabled: yes
        daemon_reload: yes
        state: restarted

    - name: Collect services facts
      service_facts:
      register: services_state
  when: services_state.ansible_facts and services_state.ansible_facts.services[ lb_name  + '.service'].state != 'running'

- name: Check {{ lb_name }}.service
  fail:
    msg: "Load balancer service {{ lb_name }}.service is not running!!! Please check, run: systemctl status {{ lb_name }}.service"
  when: services_state.ansible_facts is defined and services_state.ansible_facts.services[ lb_name  + '.service'].state != 'running'
